// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package apod_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ApodServiceClient is the client API for ApodService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApodServiceClient interface {
	GetApod(ctx context.Context, in *ApodRequest, opts ...grpc.CallOption) (*ApodReply, error)
}

type apodServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApodServiceClient(cc grpc.ClientConnInterface) ApodServiceClient {
	return &apodServiceClient{cc}
}

func (c *apodServiceClient) GetApod(ctx context.Context, in *ApodRequest, opts ...grpc.CallOption) (*ApodReply, error) {
	out := new(ApodReply)
	err := c.cc.Invoke(ctx, "/apod.ApodService/GetApod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApodServiceServer is the server API for ApodService service.
// All implementations must embed UnimplementedApodServiceServer
// for forward compatibility
type ApodServiceServer interface {
	GetApod(context.Context, *ApodRequest) (*ApodReply, error)
	mustEmbedUnimplementedApodServiceServer()
}

// UnimplementedApodServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApodServiceServer struct {
}

func (UnimplementedApodServiceServer) GetApod(context.Context, *ApodRequest) (*ApodReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetApod not implemented")
}
func (UnimplementedApodServiceServer) mustEmbedUnimplementedApodServiceServer() {}

// UnsafeApodServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApodServiceServer will
// result in compilation errors.
type UnsafeApodServiceServer interface {
	mustEmbedUnimplementedApodServiceServer()
}

func RegisterApodServiceServer(s grpc.ServiceRegistrar, srv ApodServiceServer) {
	s.RegisterService(&ApodService_ServiceDesc, srv)
}

func _ApodService_GetApod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApodServiceServer).GetApod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apod.ApodService/GetApod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApodServiceServer).GetApod(ctx, req.(*ApodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApodService_ServiceDesc is the grpc.ServiceDesc for ApodService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApodService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apod.ApodService",
	HandlerType: (*ApodServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetApod",
			Handler:    _ApodService_GetApod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/apod/apod.proto",
}
